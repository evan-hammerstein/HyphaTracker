import cv2
import tifffile as tiff
import numpy as np
from skimage.exposure import rescale_intensity
# Parameters import * 

# Initialize variables
selected_area = None
resizing = False
original_img = None
resized_img = None
scale_factor = 1.0
selection_done = False  # Flag to indicate selection is complete






def select_area(event, x, y, flags, param):
    global selected_area, resizing, resized_img, scale_factor, selection_done

    if selection_done:  # Do not allow selection after the first frame
        return

    # Scale coordinates back to the original resolution
    x, y = int(x / scale_factor), int(y / scale_factor)

    if event == cv2.EVENT_LBUTTONDOWN:  # Start selection
        selected_area = [x, y, x, y]

    elif event == cv2.EVENT_MOUSEMOVE and selected_area:  # Update rectangle dynamically
        selected_area[2], selected_area[3] = x, y

        # Draw the rectangle dynamically on the resized image
        temp_img = resized_img.copy()
        x1, y1, x2, y2 = selected_area
        cv2.rectangle(temp_img, (int(x1 * scale_factor), int(y1 * scale_factor)),
                      (int(x2 * scale_factor), int(y2 * scale_factor)), (255, 255, 255), 2)  # Cyan outline
        cv2.imshow("Image", temp_img)

    elif event == cv2.EVENT_LBUTTONUP:  # Finalize selection
        if selected_area:
            selected_area = [min(selected_area[0], selected_area[2]), min(selected_area[1], selected_area[3]),
                             max(selected_area[0], selected_area[2]), max(selected_area[1], selected_area[3])]
            print(f"Selected area: {selected_area}")
        selection_done = True

# Function to process each frame
def process_frame(frame, thresholder, threshold_value ):
    # Normalize pixel values
    if frame.max() > 255:
        frame = (255 * (frame / frame.max())).astype(np.uint8)

    # Convert to grayscale
    if frame.ndim == 3:
        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2GRAY)

    # Apply bilateral filter
    filtered = cv2.bilateralFilter(frame, d=15, sigmaColor=30, sigmaSpace=25)

    # Apply adaptive Gaussian threshold
    Thresholded = cv2.adaptiveThreshold(filtered, 255, thresholder, cv2.THRESH_BINARY, threshold_value, 2)

    # Divide and invert
    divide = cv2.divide(Thresholded, frame, scale=255)
    divide = 255 - divide

    # Stretch intensity
    maxval = np.amax(divide) / 4
    stretch = rescale_intensity(divide, in_range=(0, maxval), out_range=(0, 255)).astype(np.uint8)

    # Morphological operations for cleaning
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
    cleaned = cv2.morphologyEx(stretch, cv2.MORPH_OPEN, kernel)
    filled = cv2.morphologyEx(cleaned, cv2.MORPH_CLOSE, kernel)

    return filled

# Main function to handle frames
def main():
    global original_img, resized_img, scale_factor, selected_area


    
    Threshold_type = input("Gaussian or mean thresholding")
    Sensitivity_value = int(input("Sensitivity value"))

    if Threshold_type ==  "Gaussian":
        thresholder = cv2.ADAPTIVE_THRESH_MEAN_C
    elif Threshold_type == "Mean":
        thresholder = cv2.ADAPTIVE_THRESH_GAUSSIAN_C

    # Load the TIFF file
    tiff_file = r"C:\Users\Harry\OneDrive - Imperial College London\Bioeng\Year 3\Software Engineering\HyphaTracker\timelapse1.tif"
    frames = tiff.imread(tiff_file)

    # Process and display each frame
    for frame_idx, frame in enumerate(frames):
        print(f"Processing frame {frame_idx + 1}")
        original_img = frame.copy()

        # Crop and process the selected area
        if selected_area:
            x1, y1, x2, y2 = selected_area
            cropped_frame = original_img[y1:y2, x1:x2]
            processed_frame = process_frame(cropped_frame, thresholder, Sensitivity_value)
        else:
            processed_frame = process_frame(original_img, thresholder, Sensitivity_value)

        # Prepare resized frame for display
        height, width = processed_frame.shape[:2]
        scale_factor = 800 / width  # Resize width to 800 pixels
        resized_img = cv2.resize(processed_frame, (800, int(height * scale_factor)))

        # Display the first frame for selection
        if frame_idx == 0 and not selection_done:
            cv2.imshow("Image", resized_img)
            cv2.setMouseCallback("Image", select_area)
            print("Select the area on the first frame and press any key to continue.")
            key = cv2.waitKey(0)  # Wait for the user to finish selection
            if key == 27:  # Esc key to exit
                print("Exiting...")
                break

        # Display subsequent frames
        if selected_area:
            temp_img = resized_img.copy()
            x1, y1, x2, y2 = selected_area
            cv2.rectangle(temp_img, (int(x1 * scale_factor), int(y1 * scale_factor)),
                          (int(x2 * scale_factor), int(y2 * scale_factor)), (0, 255, 255), 2)  # Cyan outline
            cv2.imshow("Image", temp_img)
        else:
            cv2.imshow("Image", resized_img)

        # Wait for user input
        key = cv2.waitKey(0)
        if key == 27:  # Esc key to exit
            print("Exiting...")
            break
        elif key == ord('s'):  # Save the processed frame
            output_file = f"processed_frame_{frame_idx + 1}.png"
            cv2.imwrite(output_file, processed_frame)
            print(f"Saved processed frame {frame_idx + 1} as {output_file}.")

    # Cleanup
    cv2.destroyAllWindows()

# Run the script
if __name__ == "__main__":
    main()



